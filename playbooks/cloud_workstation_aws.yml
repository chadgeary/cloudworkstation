---
- name: workstation.yml
  hosts: localhost
  become: True
  become_user: root
  tasks:

    - name: if not defined, set duckdns_domain to blank value
      set_fact:
        duckdns_domain: "{% if duckdns_domain is not defined %}{% else %}{{ duckdns_domain }}{% endif %}"

    - name: if not defined, set duckdns_token to blank value
      set_fact:
        duckdns_token: "{% if duckdns_token is not defined %}{% else %}{{ duckdns_token }}{% endif %}"

    - name: if not defined, set letsencrypt_email to blank value
      set_fact:
        letsencrypt_email: "{% if letsencrypt_email is not defined %}{% else %}{{ letsencrypt_email }}{% endif %}"

    - name: if not defined, set docker_duckdnsupdater to blank value
      set_fact:
        guacnet_duckdnsupdater: "{% if guacnet_duckdnsupdater is not defined %}{% else %}{{ guacnet_duckdnsupdater }}{% endif %}"

    - name: docker pip3 ssl xfce and xrdp
      apt:
        pkg:
          - docker.io
          - python3-pip
          - ssl-cert
          - xfce4
          - xfce4-terminal
          - xrdp
        state: latest
        update_cache: yes
      retries: 3
      delay: 30
      register: packages_install
      until: packages_install is not failed
      when: desktop == "xfce"

    - name: docker gnome pip3 ssl and xrdp
      apt:
        pkg:
          - docker.io
          - gdm3
          - gnome-session
          - gnome-terminal
          - python3-pip
          - ssl-cert
          - xrdp
        state: latest
        update_cache: yes
      retries: 3
      delay: 30
      register: packages_install
      until: packages_install is not failed
      when: desktop == "gnome"

    - name: install boto3 botocore and docker python package for ansible
      pip:
        executable: /usr/bin/pip3
        name:
          - boto3
          - botocore
          - docker

    - name: add xrdp user to ssl-cert group
      user:
        name: xrdp
        groups: ssl-cert
        append: yes

    - name: set xrdp listen local (docker) only
      lineinfile:
        path: /etc/xrdp/xrdp.ini
        insertbefore: '^; tcp port to listen'
        line: address=172.17.0.1
      register: xrdp_ini

    - name: disable permit root rdp
      lineinfile:
        path: /etc/xrdp/sesman.ini
        regexp: '^AllowRootLogin='
        line: 'AllowRootLogin=False'
      register: sesman_ini

    - name: xsession for ubuntu user
      blockinfile:
        path: /home/ubuntu/.xsession
        create: yes
        owner: xrdp
        group: xrdp
        mode: '0544'
        block: |
          # Enables the session for ubuntu user 
          export LOGNAME=$USER
          export LIBGL_ALWAYS_INDIRECT=0
          unset SESSION_MANAGER
          unset DBUS_SESSION_BUS_ADDRESS
          {% if desktop == 'xfce' %}xfce4-session{% elif desktop == 'gnome' %}gnome-session{% endif %}

    - name: colord for gnome
      blockinfile:
        path: /etc/polkit-1/localauthority/50-local.d/allow-colord.pkla
        create: yes
        owner: root
        group: root
        mode: '0444'
        block: |
          [Allow colord for all users]
          Identity=unix-user:*
          Action=org.freedesktop.color-manager.create-device;org.freedesktop.color-manager.create-profile;org.freedesktop.color-manager.delete-device;org.freedesktop.color-manager.delete-profile;org.freedesktop.color-manager.modify-device;org.freedesktop.color-manager.modify-profile 
          ResultAny=yes
          ResualtInactive=auth_admin
          ResultActive=yes
      when: desktop == 'gnome'

    - name: set xrdp sesman systemd unit to wait for docker
      lineinfile:
        path: /lib/systemd/system/xrdp-sesman.service
        regexp: '^After=network.target'
        line: 'After=network.target docker.service'

    - name: enable / start docker and xrdp
      systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
        daemon_reload: yes
      with_items:
        - docker
        - xrdp

    - name: restart xrdp if inis changed
      systemd:
        name: xrdp
        state: restarted
      when: xrdp_ini.changed or sesman_ini.changed

    - name: Container dirs
      file:
        path: "/opt/{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0750'
      with_items:
        - guacamole
        - webproxy
        - webproxy/nginx
        - webproxy/nginx/proxy-confs

    - name: secure web proxy confs
      template:
        src: "{{ item }}"
        dest: "/opt/webproxy/{{ item }}"
        owner: root
        group: root
        mode: 0444
      with_items:
        - httpd-ssl.conf
        - httpd.conf
        - nginx/nginx.conf
        - nginx/proxy-confs/cloudworkstation.conf
      register: proxy_conf_files

    - name: Determine db passwords set (root)
      stat:
        path: /opt/guacamole/guacdb_root_file
      register: guacdb_root_file

    - name: Determine db passwords set (guacamole)
      stat:
        path: /opt/guacamole/guacdb_guacamole_file
      register: guacdb_guacamole_file

    - name: Create db passwords when not set (root)
      shell: |
        head /dev/urandom | tr -dc A-Za-z0-9 | head -c 20 > /opt/guacamole/guacdb_root_file
      when: guacdb_root_file.stat.exists|bool == False

    - name: Create db passwords when not set (guacamole)
      shell: |
        head /dev/urandom | tr -dc A-Za-z0-9 | head -c 20 > /opt/guacamole/guacdb_guacamole_file
      when: guacdb_guacamole_file.stat.exists|bool == False

    - name: Register db passwords
      shell: |
        cat /opt/guacamole/guacdb_root_file
      register: guacdb_root_pass

    - name: Register db pass (guacamole)
      shell: |
        cat /opt/guacamole/guacdb_guacamole_file
      register: guacdb_guacamole_pass

    - name: Docker Volume (db)
      docker_volume:
        name: guacdb

    - name: Docker Network
      docker_network:
        name: guacnet
        ipam_config:
          - subnet: "{{ guacnet_cidr }}"

    - name: Docker Container - guacd
      docker_container:
        name: guacd
        image: guacamole/guacd
        networks:
          - name: guacnet
            ipv4_address: "{{ guacnet_guacd }}"
        restart_policy: "always"

    - name: Docker Container - guacdb
      docker_container:
        name: guacdb
        env:
          MYSQL_ROOT_PASSWORD: "{{ guacdb_root_pass.stdout }}"
        image: mysql/mysql-server
        networks:
          - name: guacnet
            ipv4_address: "{{ guacnet_guacdb }}"
        purge_networks: yes
        restart_policy: "always"
        volumes:
          - guacdb:/var/lib/mysql

    - name: Docker Container - guacamole
      docker_container:
        name: guacamole
        env:
          MYSQL_HOSTNAME: "{{ guacnet_guacdb }}"
          MYSQL_PORT: "3306"
          MYSQL_DATABASE: "guacamole_db"
          MYSQL_USER: "guacamole_user"
          MYSQL_PASSWORD: "{{ guacdb_guacamole_pass.stdout }}"
          GUACD_HOSTNAME: "{{ guacnet_guacd }}"
          GUACD_PORT: "4822"
          GUACD_LOG_LEVEL: "debug"
        image: guacamole/guacamole
        links:
          - "guacd:guacd"
          - "guacdb:mysql"
        networks:
          - name: guacnet
            ipv4_address: "{{ guacnet_guacamole }}"
        purge_networks: yes
        restart_policy: "always"

    - name: web proxy container
      docker_container:
        name: web_proxy
        image: httpd:2.4
        networks:
          - name: guacnet
            ipv4_address: "{{ guacnet_webproxy }}"
        ports:
          - "443:443"
        volumes:
          - /opt/webproxy/httpd-ssl.conf:/usr/local/apache2/conf/extra/httpd-ssl.conf:ro
          - /opt/webproxy/httpd.conf:/usr/local/apache2/conf/httpd.conf:ro
          - /etc/ssl/certs/ssl-cert-snakeoil.pem:/usr/local/apache2/conf/server.crt:ro
          - /etc/ssl/private/ssl-cert-snakeoil.key:/usr/local/apache2/conf/server.key:ro
        purge_networks: yes
        restart_policy: "always"
        restart: "{% if proxy_conf_files.changed %}yes{% else %}no{% endif %}"
      when: duckdns_domain == ""

    - name: duckdnsupdater container
      docker_container:
        name: duckdnsupdater
        hostname: duckdnsupdater
        image: ghcr.io/linuxserver/duckdns
        networks:
          - name: guacnet
            ipv4_address: "{{ guacnet_duckdnsupdater }}"
        env:
          PUID: "1000"
          PGID: "1000"
          TZ: "UTC"
          SUBDOMAINS: "{{ duckdns_domain.split('.')[0] }}"
          TOKEN: "{{ duckdns_token }}"
        pull: yes
        purge_networks: yes
        restart_policy: "always"
        container_default_behavior: "compatibility"
      when: duckdns_domain != ""

    - name: duckdns web proxy container
      docker_container:
        name: web_proxy
        hostname: webproxy
        image: ghcr.io/linuxserver/swag
        networks:
          - name: guacnet
            ipv4_address: "{{ guacnet_webproxy }}"
        env:
          PUID: "1000"
          PGID: "1000"
          TZ: "UTC"
          URL: "{{ duckdns_domain }}"
          DUCKDNSTOKEN: "{{ duckdns_token }}"
          EMAIL: "{{ letsencrypt_email }}"
          VALIDATION: "duckdns"
        ports:
          - "443:443"
        volumes: "/opt/webproxy:/config"
        pull: yes
        purge_networks: yes
        restart_policy: "always"
        container_default_behavior: "compatibility"
        restart: "{% if proxy_conf_files.changed %}yes{% else %}no{% endif %}"
      when: duckdns_domain != ""

    - name: Determine if (One Time) was done
      stat:
        path: /opt/guacamole/db_conf_done
      register: guacdb_one_time_done

    - name: Set my.cnf and dbpass.sql
      template:
        src: "{{ item }}"
        dest: "/opt/guacamole/{{ item }}"
        owner: root
        group: root
        mode: '0400'
      with_items:
        - my.cnf
        - dbpass.sql
      when: guacdb_one_time_done.stat.exists|bool == False

    - name: Wait for mysqld on 3306
      shell: |
        docker logs guacdb 2>&1 | grep --quiet 'port: 3306'
      register: wait_for_mysqld
      until: wait_for_mysqld.rc == 0
      retries: 15
      delay: 15
      when: guacdb_one_time_done.stat.exists|bool == False

    - name: Configure DB (One Time)
      shell: |
        # credentials
        docker cp /opt/guacamole/my.cnf guacdb:/root/.my.cnf
        docker cp /opt/guacamole/dbpass.sql guacdb:dbpass.sql
        docker exec -i guacdb /bin/bash -c "mysql < dbpass.sql"
        touch /opt/guacamole/one_time_done
        # schema
        docker exec -i guacamole /bin/bash -c 'cat /opt/guacamole/mysql/schema/*.sql' > /opt/guacamole/dbschema.sql
        docker cp /opt/guacamole/dbschema.sql guacdb:dbschema.sql
        docker exec -i guacdb /bin/bash -c "mysql guacamole_db < dbschema.sql"
      when: guacdb_one_time_done.stat.exists|bool == False

    - name: Set One Time
      file:
        path: /opt/guacamole/db_conf_done
        state: touch

# The following sets the default AMI user (ubuntu)'s password from a random string,
# guacadmin's password to cw_password from AWS Parameter secret
# and creates a default RDP connection for the Ubuntu user in Guacamole
    - name: Determine User and Session one-time setup complete
      stat:
        path: /opt/guacamole/user_session_done
      register: usersession_one_time_done

    - name: Get SSM parameter cw_password (One Time)
      set_fact:
        cw_password: "{{ lookup('aws_ssm', name_prefix + '-cw-web-password-' + name_suffix, decrypt=True, region=aws_region) }}"
      when: usersession_one_time_done.stat.exists|bool == False
      no_log: True

    - name: Set Ubuntu password (One Time)
      user:
        name: ubuntu
        password: "{{ cw_password | password_hash('sha512') }}"
      when: usersession_one_time_done.stat.exists|bool == False

    - name: Get Auth Token from Guacamole with Default Credentials (One Time)
      uri:
        url: https://{% if duckdns_domain != "" %}{{ duckdns_domain }}{% else %}127.0.0.1{% endif %}:443/guacamole/api/tokens
        method: POST
        body: "username=guacadmin&password=guacadmin"
        validate_certs: {% if duckdns_domain == "" %}no{% endif %}
      register: GUAC_AUTH_RESPONSE
      retries: 60
      delay: 1
      until: "'authToken' in GUAC_AUTH_RESPONSE.json"
      when: usersession_one_time_done.stat.exists|bool == False

    - name: Add RDP Connection to Cloud Workstation (One Time)
      uri:
        url: https://{% if duckdns_domain != "" %}{{ duckdns_domain }}{% else %}127.0.0.1{% endif %}:443/guacamole/api/session/data/mysql/connections?token={{ GUAC_AUTH_RESPONSE.json.authToken }}
#        url: https://{% if duckdns_domain != "" %}{{ duckdns_domain }}{% else %}127.0.0.1{% endif %}:443/guacamole/api/session/data/mysql/connections?token=cheese
        method: POST
        body_format: json
        body: '{"parentIdentifier":"ROOT","name":"cloud_workstation","protocol":"rdp","parameters":{"port":"3389","read-only":"","swap-red-blue":"","cursor":"","color-depth":"","clipboard-encoding":"","disable-copy":"","disable-paste":"","dest-port":"","recording-exclude-output":"","recording-exclude-mouse":"","recording-include-keys":"","create-recording-path":"","enable-sftp":"","sftp-port":"","sftp-server-alive-interval":"","sftp-disable-download":"","sftp-disable-upload":"","enable-audio":"","wol-send-packet":"","wol-wait-time":"","security":"","disable-auth":"","ignore-cert":"true","gateway-port":"","server-layout":"","timezone":null,"console":"","width":"","height":"","dpi":"","resize-method":"","console-audio":"","disable-audio":"","enable-audio-input":"","enable-printing":"","enable-drive":"","disable-download":"","disable-upload":"","create-drive-path":"","enable-wallpaper":"","enable-theming":"","enable-font-smoothing":"","enable-full-window-drag":"","enable-desktop-composition":"","enable-menu-animations":"","disable-bitmap-caching":"","disable-offscreen-caching":"","disable-glyph-caching":"","preconnection-id":"","hostname":"172.17.0.1","username":"ubuntu","password":"{{ cw_password }}"},"attributes":{"max-connections":"5","max-connections-per-user":"5","weight":"","failover-only":"","guacd-port":"4822","guacd-encryption":"","guacd-hostname":"{{ guacnet_guacd }}"}}'
        validate_certs: {% if duckdns_domain == "" %}no{% endif %}
      register: GUAC_ADD_RDP_RESPONSE
      failed_when: "'url' not in GUAC_ADD_RDP_RESPONSE"
      when: usersession_one_time_done.stat.exists|bool == False

    - name: Set guacadmin Password to cw_password (One Time)
      uri:
        url: https://{% if duckdns_domain != "" %}{{ duckdns_domain }}{% else %}127.0.0.1{% endif %}:443/guacamole/api/session/data/mysql/users/guacadmin/password?token={{ GUAC_AUTH_RESPONSE.json.authToken }}
        method: PUT
        body_format: json
        body: '{"oldPassword":"guacadmin","newPassword":"{{ cw_password }}"}'
        validate_certs: {% if duckdns_domain == "" %}no{% endif %}
      register: GUAC_GUACADMIN_CHANGE_PASS
      failed_when: GUAC_GUACADMIN_CHANGE_PASS.status != 204
      when: usersession_one_time_done.stat.exists|bool == False

    - name: Set User and Session one-time setup complete
      file:
        path: /opt/guacamole/user_session_done
        state: touch
